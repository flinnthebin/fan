#!/usr/bin/env sh

#####################
#                   #
#      CONFIG       #
#                   #
#####################

PID="/tmp/fanmgr.pid"
TEMP_HISTORY="/tmp/temp_history"
SAMPLE_INTERVAL=2   # Temp check interval (s)
SAMPLES=5           # No. samples for mean avg 

#####################
#                   #
#      CONFIG       #
#                   #
#####################

fan_mode() {
    sudo fan $1 > /dev/null 2>&1
}

start_fanmgr() {
    if [ -f "$PID" ]; then
        echo "fanmgr already active [PID: $(cat $PID)]"
        exit 1
    fi

    "$0" --background &
    pid=$!
    echo $pid > "$PID"
    echo "fanmgr active [PID: $pid]"
    exit 0
}

kill_fanmgr() {
    if [ ! -f "$PID" ]; then
        echo "fanmgr inactive."
        exit 1
    fi

    pid=$(cat "$PID")
    kill "$pid" && rm -f "$PID" "$TEMP_HISTORY"
    echo "fanmgr inactive."
    exit 0
}

get_cpu_temp() {
    TEMP=$(cat /sys/class/thermal/thermal_zone0/temp)
    echo $((TEMP / 1000))  # millidegrees to Â°C
}

average_temp() {
    total=0
    count=0
    while read -r t; do
        total=$((total + t))
        count=$((count + 1))
    done < "$TEMP_HISTORY"

    [ $count -gt 0 ] && echo $((total / count)) || echo 0
}

monitor_temp() {

    while true; do
        temp=$(get_cpu_temp)
        echo "$temp" >> "$TEMP_HISTORY"

        # ensure data is current 
        [ $(wc -l < "$TEMP_HISTORY") -gt $SAMPLES ] && sed -i '1d' "$TEMP_HISTORY"

        avg_temp=$(average_temp)

        if [ "$avg_temp" -lt 40 ]; then
            fan_mode "0 0"  # Both fans off
        elif [ "$avg_temp" -ge 40 ] && [ "$avg_temp" -lt 50 ]; then
            fan_mode "1 -1"  # Left fan 2400 rpm, right fan off
        elif [ "$avg_temp" -ge 50 ] && [ "$avg_temp" -lt 55 ]; then
            fan_mode "0 1"  # Right fan 5100 rpm, left fan off
        elif [ "$avg_temp" -ge 55 ] && [ "$avg_temp" -lt 65 ]; then
            fan_mode "1 1"  # Left 2400 rpm, right 5100 rpm
        else
            fan_mode "2 2"  # Left 6300 rpm, right 5800 rpm
        fi

        sleep "$SAMPLE_INTERVAL"
    done
}

# Parse args
if [ "$1" = "-k" ]; then
    kill_fanmgr
elif [ "$1" != "--background" ]; then
    start_fanmgr
fi

# Main
monitor_temp

